{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriiauhliai/Downloads/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 6,\n  ncols = 6,\n  chanceLightStartsOn = 0.25\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        const isLit = Math.random() < chanceLightStartsOn;\n        row.push(isLit);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const newBoard = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, newBoard);\n      flipCell(y + 1, x, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y, x - 1, newBoard);\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  if (hasWon) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-msg\",\n      children: \"You won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 12\n    }, this);\n  }\n\n  // make table board\n\n  // TODO\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((cell, colIdx) => /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: cell,\n          flipCellsAroundMe: () => flipCellsAround(`${rowIdx}-${colIdx}`)\n        }, `${rowIdx}-${colIdx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this))\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","isLit","Math","random","push","hasWon","every","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","newBoard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIdx","colIdx","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["/Users/viktoriiauhliai/Downloads/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows=6, ncols=6, chanceLightStartsOn=0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        const isLit = Math.random() < chanceLightStartsOn;\n        row.push(isLit);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every((row) => row.every((cell) => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const newBoard = oldBoard.map((row) => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, newBoard);\n      flipCell(y + 1, x, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y, x - 1, newBoard);\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  if (hasWon) {\n    return <div className=\"Board-msg\">You won!</div>;\n  }\n\n  // make table board\n\n  // TODO\n  return (\n    <table className=\"Board\">\n      <tbody>\n        {board.map((row, rowIdx) => (\n          <tr key={rowIdx}>\n            {row.map((cell, colIdx) => (\n              <Cell\n                key={`${rowIdx}-${colIdx}`}\n                isLit={cell}\n                flipCellsAroundMe={() => flipCellsAround(`${rowIdx}-${colIdx}`)}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}